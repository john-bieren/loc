#!/usr/bin/env python3

'''Generate languages.go from scc's languages.json and user's custom_mappings.json'''

from json import JSONDecodeError, load, loads
from urllib.request import urlopen

LANGUAGES_URL = "https://raw.githubusercontent.com/boyter/scc/refs/heads/master/languages.json"
CUSTOM_MAPPINGS_FILE = "custom_mappings.json"

class LanguagesWriter():
    '''Object that converts json inputs into map definitions in languages.go'''
    def __init__(self):
        self.languages = {}
        self.custom_mappings = {}
        self.file_lines = []
        self.languages_used = set()
        self._load_files()

    def _load_files(self):
        '''Load languages.json from scc and custom mappings from user'''
        with urlopen(LANGUAGES_URL, timeout=10) as page:
            text = page.read().decode("utf-8")
        self.languages = loads(text)

        try:
            with open(CUSTOM_MAPPINGS_FILE, "r", encoding="utf-8") as file:
                self.custom_mappings = load(file)
        except (FileNotFoundError, JSONDecodeError):
            pass

    def write_file(self):
        '''Generate file lines, write to languages.go'''
        self._generate_text()
        with open("languages.go", "w", encoding="UTF-8") as file:
            file.writelines(self.file_lines)

    def _generate_text(self):
        '''Turn languages dictionary and custom mappings into the lines of languages.go'''
        extra_text = " with custom mappings" if len(self.custom_mappings) > 0 else ""
        self.file_lines.append("package main\n")
        self.file_lines.append(f"\n//This file was generated by refresh_languages.py{extra_text}, DO NOT EDIT\n")
        self._generate_extensions()
        self._generate_filenames()
        self._generate_single_comment_chars()

    def _generate_extensions(self):
        '''Generate definition for extensions map'''
        # turn extensions into dictionary, process conflicts
        extensions = {}
        for language, info in self.languages.items():
            for ext in info.get('extensions', []):
                current_mapping = extensions.get(ext, "")
                if current_mapping != "":
                    extensions[ext] = f"{current_mapping} or {language}"
                else:
                    extensions[ext] = language

        # add/overwrite keys from custom_mappings
        extensions = extensions | self.custom_mappings.get("extensions", {})
        self.languages_used = self.languages_used | set(extensions.values())

        # record file lines
        self.file_lines.append("\n// Languages and extensions recognized as code")
        self.file_lines.append("\nvar extensions = map[string]string{")
        for extension, language in extensions.items():
            self.file_lines.append(f'\n    ".{extension}": "{language}",')
        self.file_lines.append("\n}\n")

    def _generate_filenames(self):
        '''Generate definition for filenames map'''
        # turn filenames into dictionary
        filenames = {}
        for language, info in self.languages.items():
            for file in info.get('filenames', []):
                filenames[file] = language

        # add/overwrite keys from custom_mappings
        filenames = filenames | self.custom_mappings.get("filenames", {})
        self.languages_used = self.languages_used | set(filenames.values())

        # record file lines
        self.file_lines.append("\n// Specific file names recognized as a particular language")
        self.file_lines.append("\nvar filenames = map[string]string{")
        for file, language in filenames.items():
            self.file_lines.append(f'\n    "{file}": "{language}",')
        self.file_lines.append("\n}\n")

    def _generate_single_comment_chars(self):
        '''Generate definition for single_line_comment_chars map'''
        # turn character sets into dictionary
        comment_chars = {}
        for language, info in self.languages.items():
            comment_chars[language] = info['line_comment']

        # add/overwrite keys from custom_mappings
        comment_chars = comment_chars |self. custom_mappings.get("single_line_comment_chars", {})

        # record file lines
        self.file_lines.append("\n// Single-line comment characters for all languages")
        self.file_lines.append("\nvar single_line_comment_chars = map[string][]string{")
        for language, comment_char_set in comment_chars.items():
            # skip languages that don't appear in either of the other maps
            if language not in self.languages_used:
                continue

            if len(comment_char_set) > 0:
                # make sure escape characters are used correctly
                chars = []
                for char in comment_char_set:
                    char = "\\\"" if char in ('"', '\"') else char
                    chars.append(char)

                line = f'\n    "{language}": {{"{'","'.join(chars)}"}},'
            else:
                line = f'\n    "{language}": {{}},'
            self.file_lines.append(line)
        self.file_lines.append("\n}\n")

if __name__ == "__main__":
    languages_writer = LanguagesWriter()
    languages_writer.write_file()
